services:
  backend:
    build:
      context: ./backend
      dockerfile: ./docker/Dockerfile
    container_name: go-backend
    # Le backend démarrera après postgres.
    depends_on:
      - postgres
    ports:
      - "${APP_PORT}:${APP_PORT}"
    environment:
      - APP_URL=${APP_URL}
      - APP_PORT=${APP_PORT}
      - APP_KEY=${APP_KEY}
    volumes:
      - ./backend:/app

  frontend:
    build:
      context: ./frontend
      dockerfile: ./docker/Dockerfile
      target: ${FRONTEND_TARGET:-development} # Use 'development' by default, 'production' for prod
    container_name: vue-frontend
    ports:
      - "${FRONTEND_PORT:-5173}:${FRONTEND_PORT:-5173}" # Use 5173 for dev, 80 for prod
    depends_on:
      - backend
    volumes:
      - ./frontend:/app # For development hot-reloading
      - /app/node_modules # Prevents overwriting of node_modules

  postgres:
    image: postgres:14
    container_name: postgres-db
    restart: always
    environment:
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_DB=${POSTGRES_DB}
    ports:
      - "${POSTGRES_PORT}:5432"
    volumes:
      # Persistance des données
      - postgres_data:/var/lib/postgresql/data
      # Exécute automatiquement les scripts SQL présents dans ./database
      - ./backend/database:/docker-entrypoint-initdb.d

  prometheus:
    image: prom/prometheus
    container_name: prometheus-server
    ports:
      - "9090:9090"
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml:ro
    command:
      - "--config.file=/etc/prometheus/prometheus.yml"

  grafana:
    image: grafana/grafana
    container_name: grafana-server
    ports:
      - "3000:3000"
    volumes:
      - grafana-storage:/var/lib/grafana
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin

volumes:
  postgres_data:
  grafana-storage:
